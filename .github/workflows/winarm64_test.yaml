name: Build Windows test package

on:
  workflow_dispatch:
  push:

env:
  QT_VERSION: 5.12.12

jobs:
  build_windows:
    strategy:
      matrix:
        configuration: [FastDebug]
        os: [windows-2022, windows-11-arm]
        include:
          - os: windows-11-arm
            arch: ARM64
            simd: ""
          # - os: windows-2022
          #   arch: Win32
          #   simd: SSE2
          - os: windows-2022
            arch: x64
            simd: SSE2
          # - os: windows-2022
          #   arch: Win32
          #   simd: AVX
          # - os: windows-2022
          #   arch: x64
          #   simd: AVX
    name: Windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        # Checkout repo
        name: Checkout
        with:
          submodules: true
          ref: '${{ github.ref }}'
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.304.1
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: Configure CMake
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          ARCHITECTURE: ${{ matrix.arch }}
          SIMD: ${{ matrix.simd }}
        shell: bash
        run: |
          mkdir build
          cd build

          VULKAN=

          if [ "$ARCHITECTURE" = "Win32" ]; then
            VULKAN="-DFSO_BUILD_WITH_VULKAN=OFF"
          fi

          cmake -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DFSO_USE_SPEECH="ON" \
              -DFSO_USE_VOICEREC="ON" -DFORCED_SIMD_INSTRUCTIONS="$SIMD" \
              -DFSO_BUILD_QTFRED=OFF ${VULKAN} -DFSO_BUILD_TESTS=ON \
              -DFSO_INSTALL_DEBUG_FILES="ON" -A "$ARCHITECTURE" \
              -G "Visual Studio 17 2022" -T "v143" -DCMAKE_BUILD_TYPE=$CONFIGURATION ..
      - name: Compile
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          cmake --build . --config "$CONFIGURATION" --target INSTALL -- /verbosity:minimal
          ls -alR "$(pwd)/install"
      - name: Run Tests
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
        shell: bash
        run: ./bin/$CONFIGURATION/unittests --gtest_shuffle
      - name: Set artifact id
        shell: bash
        run: |
          id=
          if [ -n "${{ matrix.simd }}" ]; then
            id="${{ matrix.configuration }}-${{ matrix.arch }}-${{ matrix.simd }}"
          else
            id="${{ matrix.configuration }}-${{ matrix.arch }}"
          fi
          echo "artifact_id=${id}" >> $GITHUB_ENV
      - name: Upload build result
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ env.artifact_id }}
          path: ${{ github.workspace }}/build/install/*
